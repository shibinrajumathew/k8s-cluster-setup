---
- hosts: all
  become: yes
  tasks:
    - name: Remove swap entries from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^\s*([^#]\S*\s+\S+\s+swap\s+\S+.*)$'
        replace: '# \1'
      notify: Update fstab

    - name: Ensure swap is disabled in sysctl
      sysctl:
        name: vm.swappiness
        value: '0'
        state: present
        sysctl_set: yes

    - name: Update and install dependencies
      apt:
        update_cache: yes
        name: 
          - ca-certificates
          - curl
          - apt-transport-https
          - gnupg
        state: present

    - name: Add Docker's official GPG key
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update package list
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      shell: |
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: Update package list again
      apt:
        update_cache: yes

    - name: Install Kubernetes components
      apt:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes packages at current version
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Generate containerd default configuration
      ansible.builtin.shell: |
        containerd config default > /etc/containerd/config.toml
      become: true

    - name: Update SystemdCgroup to true in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        line: 'SystemdCgroup = true'
      become: true
    - name: Restart containerd service
      ansible.builtin.service:
        name: containerd
        state: restarted
      become: true

  handlers:
    - name: Update fstab
      command: systemctl daemon-reload
      become: yes

- hosts: master
  tasks:
    - name: Initialize Kubernetes cluster
      become: yes
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: init_output
      ignore_errors: yes
      
    - name: Create .kube directory in the user's home
      become: yes
      file:
        path: "/home/ubuntu/.kube"
        state: directory
        mode: '0755'
        owner: "ubuntu"
        group: "ubuntu"

    - name: Copy /etc/kubernetes/admin.conf to user's .kube directory
      become: yes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/ubuntu/.kube/config"
        remote_src: yes
        owner: "ubuntu"
        group: "ubuntu"
        mode: '0600'

    - name: Ensure correct ownership of .kube/config
      become: yes
      file:
        path: "/home/ubuntu/.kube/config"
        owner: "ubuntu"
        group: "ubuntu"
        mode: '0600'

    - name: Install Calico network plugin
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    - name: Extract join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command for later use
      local_action: copy content="{{ join_command.stdout }}" dest=./join_command.txt

- hosts: workers
  become: yes
  tasks:
    - name: Run join command on worker nodes
      shell: "{{ lookup('file', './join_command.txt') }}"

- hosts: master
  tasks:
    - name: Label control-plane node
      command: kubectl label nodes ip-10-0-1-100 kubernetes.io/role=control-plane --overwrite

    - name: Label worker node 1
      command: kubectl label nodes ip-10-0-1-200 kubernetes.io/role=worker_1 --overwrite

    - name: Label worker node 2
      command: kubectl label nodes ip-10-0-2-200 kubernetes.io/role=worker_2 --overwrite

    - name: Label worker node 3
      command: kubectl label nodes ip-10-0-3-200 kubernetes.io/role=worker_3 --overwrite

    - name: Download the Helm installation script
      become: yes
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'

    - name: Run the Helm installation script
      become: yes
      ansible.builtin.command: /tmp/get_helm.sh
      args:
        chdir: /tmp
    - name: Add the NGINX stable Helm repository
      become: yes
      ansible.builtin.command: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      args:
        chdir: /usr/local/bin

    - name: Update Helm repositories
      become: yes
      ansible.builtin.command: helm repo update
      args:
        chdir: /usr/local/bin

    - name: Install NGINX ingress using Helm
      become: yes
      ansible.builtin.command: >
        helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.admissionWebhooks.enabled=false
      args:
        chdir: /usr/local/bin